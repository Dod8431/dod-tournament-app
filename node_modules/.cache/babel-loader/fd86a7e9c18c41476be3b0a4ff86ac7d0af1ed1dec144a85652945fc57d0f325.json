{"ast":null,"code":"import { db } from './config';\nimport { doc, setDoc, getDoc, addDoc, collection, updateDoc, arrayUnion, onSnapshot, query, where, getDocs, serverTimestamp } from 'firebase/firestore';\nimport { deleteDoc } from 'firebase/firestore';\nexport async function createTournament(data) {\n  const tournamentRef = await addDoc(collection(db, 'tournaments'), {\n    ...data,\n    createdAt: serverTimestamp(),\n    currentRound: 1,\n    users: [],\n    votes: [],\n    isActive: true\n  });\n  return tournamentRef.id;\n}\nexport async function addUserToTournament(tid, user) {\n  const tRef = doc(db, 'tournaments', tid);\n  await updateDoc(tRef, {\n    users: arrayUnion(user)\n  });\n}\nexport async function getTournament(tid) {\n  const tRef = doc(db, 'tournaments', tid);\n  const snap = await getDoc(tRef);\n  return snap.data();\n}\n\n// Helper: get tournament w/ id included\nexport async function getTournamentWithId(tid) {\n  const tRef = doc(db, 'tournaments', tid);\n  const snap = await getDoc(tRef);\n  return {\n    id: tid,\n    ...snap.data()\n  };\n}\nexport async function getAllActiveTournaments() {\n  const q = query(collection(db, 'tournaments'), where('isActive', '==', true));\n  const snap = await getDocs(q);\n  return snap.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  }));\n}\nexport async function archiveTournament(tid) {\n  const tRef = doc(db, \"tournaments\", tid);\n  await updateDoc(tRef, {\n    isActive: false\n  });\n}\nexport async function deleteTournament(tid) {\n  const tRef = doc(db, \"tournaments\", tid);\n  await deleteDoc(tRef);\n}\n\n// Get all tournaments by adminId\nexport async function getTournamentsByAdmin(adminId) {\n  const q = query(collection(db, 'tournaments'), where('adminId', '==', adminId));\n  const snap = await getDocs(q);\n  return snap.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  }));\n}\nexport function listenTournament(tid, cb) {\n  return onSnapshot(doc(db, 'tournaments', tid), doc => {\n    cb(doc.data());\n  });\n}\nexport async function submitVote(tid, userId, roundNum, matchId, votedFor) {\n  const tRef = doc(db, 'tournaments', tid);\n  await updateDoc(tRef, {\n    votes: arrayUnion({\n      userId,\n      roundNum,\n      matchId,\n      votedFor\n    })\n  });\n}\nexport async function updateBracket(tid, bracket) {\n  const tRef = doc(db, 'tournaments', tid);\n  await updateDoc(tRef, {\n    bracket\n  });\n}\nexport async function advanceRound(tid, newBracket, nextRound) {\n  const tRef = doc(db, 'tournaments', tid);\n  await updateDoc(tRef, {\n    bracket: newBracket,\n    currentRound: nextRound\n  });\n}\n\n// Check admin pin for a tournament\nexport async function checkAdminPin(tid, pin) {\n  const tRef = doc(db, 'tournaments', tid);\n  const snap = await getDoc(tRef);\n  const data = snap.data();\n  return (data === null || data === void 0 ? void 0 : data.adminPin) === pin;\n}","map":{"version":3,"names":["db","doc","setDoc","getDoc","addDoc","collection","updateDoc","arrayUnion","onSnapshot","query","where","getDocs","serverTimestamp","deleteDoc","createTournament","data","tournamentRef","createdAt","currentRound","users","votes","isActive","id","addUserToTournament","tid","user","tRef","getTournament","snap","getTournamentWithId","getAllActiveTournaments","q","docs","map","archiveTournament","deleteTournament","getTournamentsByAdmin","adminId","listenTournament","cb","submitVote","userId","roundNum","matchId","votedFor","updateBracket","bracket","advanceRound","newBracket","nextRound","checkAdminPin","pin","adminPin"],"sources":["C:/Users/doria/dod-tournament-app/src/firebase/firestore.js"],"sourcesContent":["import { db } from './config';\r\nimport {\r\n  doc, setDoc, getDoc, addDoc, collection, updateDoc, arrayUnion, onSnapshot, query, where, getDocs, serverTimestamp\r\n} from 'firebase/firestore';\r\nimport { deleteDoc } from 'firebase/firestore';\r\n\r\nexport async function createTournament(data) {\r\n  const tournamentRef = await addDoc(collection(db, 'tournaments'), {\r\n    ...data,\r\n    createdAt: serverTimestamp(),\r\n    currentRound: 1,\r\n    users: [],\r\n    votes: [],\r\n    isActive: true,\r\n  });\r\n  return tournamentRef.id;\r\n}\r\n\r\nexport async function addUserToTournament(tid, user) {\r\n  const tRef = doc(db, 'tournaments', tid);\r\n  await updateDoc(tRef, { users: arrayUnion(user) });\r\n}\r\n\r\nexport async function getTournament(tid) {\r\n  const tRef = doc(db, 'tournaments', tid);\r\n  const snap = await getDoc(tRef);\r\n  return snap.data();\r\n}\r\n\r\n// Helper: get tournament w/ id included\r\nexport async function getTournamentWithId(tid) {\r\n  const tRef = doc(db, 'tournaments', tid);\r\n  const snap = await getDoc(tRef);\r\n  return { id: tid, ...snap.data() };\r\n}\r\n\r\nexport async function getAllActiveTournaments() {\r\n  const q = query(collection(db, 'tournaments'), where('isActive', '==', true));\r\n  const snap = await getDocs(q);\r\n  return snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n}\r\n\r\nexport async function archiveTournament(tid) {\r\n  const tRef = doc(db, \"tournaments\", tid);\r\n  await updateDoc(tRef, { isActive: false });\r\n}\r\n\r\nexport async function deleteTournament(tid) {\r\n  const tRef = doc(db, \"tournaments\", tid);\r\n  await deleteDoc(tRef);\r\n}\r\n\r\n// Get all tournaments by adminId\r\nexport async function getTournamentsByAdmin(adminId) {\r\n  const q = query(collection(db, 'tournaments'), where('adminId', '==', adminId));\r\n  const snap = await getDocs(q);\r\n  return snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n}\r\n\r\nexport function listenTournament(tid, cb) {\r\n  return onSnapshot(doc(db, 'tournaments', tid), (doc) => {\r\n    cb(doc.data());\r\n  });\r\n}\r\n\r\nexport async function submitVote(tid, userId, roundNum, matchId, votedFor) {\r\n  const tRef = doc(db, 'tournaments', tid);\r\n  await updateDoc(tRef, {\r\n    votes: arrayUnion({ userId, roundNum, matchId, votedFor })\r\n  });\r\n}\r\n\r\nexport async function updateBracket(tid, bracket) {\r\n  const tRef = doc(db, 'tournaments', tid);\r\n  await updateDoc(tRef, { bracket });\r\n}\r\n\r\nexport async function advanceRound(tid, newBracket, nextRound) {\r\n  const tRef = doc(db, 'tournaments', tid);\r\n  await updateDoc(tRef, {\r\n    bracket: newBracket,\r\n    currentRound: nextRound\r\n  });\r\n}\r\n\r\n// Check admin pin for a tournament\r\nexport async function checkAdminPin(tid, pin) {\r\n  const tRef = doc(db, 'tournaments', tid);\r\n  const snap = await getDoc(tRef);\r\n  const data = snap.data();\r\n  return data?.adminPin === pin;\r\n}\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,UAAU;AAC7B,SACEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,eAAe,QAC7G,oBAAoB;AAC3B,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,OAAO,eAAeC,gBAAgBA,CAACC,IAAI,EAAE;EAC3C,MAAMC,aAAa,GAAG,MAAMZ,MAAM,CAACC,UAAU,CAACL,EAAE,EAAE,aAAa,CAAC,EAAE;IAChE,GAAGe,IAAI;IACPE,SAAS,EAAEL,eAAe,CAAC,CAAC;IAC5BM,YAAY,EAAE,CAAC;IACfC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,OAAOL,aAAa,CAACM,EAAE;AACzB;AAEA,OAAO,eAAeC,mBAAmBA,CAACC,GAAG,EAAEC,IAAI,EAAE;EACnD,MAAMC,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMlB,SAAS,CAACoB,IAAI,EAAE;IAAEP,KAAK,EAAEZ,UAAU,CAACkB,IAAI;EAAE,CAAC,CAAC;AACpD;AAEA,OAAO,eAAeE,aAAaA,CAACH,GAAG,EAAE;EACvC,MAAME,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMI,IAAI,GAAG,MAAMzB,MAAM,CAACuB,IAAI,CAAC;EAC/B,OAAOE,IAAI,CAACb,IAAI,CAAC,CAAC;AACpB;;AAEA;AACA,OAAO,eAAec,mBAAmBA,CAACL,GAAG,EAAE;EAC7C,MAAME,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMI,IAAI,GAAG,MAAMzB,MAAM,CAACuB,IAAI,CAAC;EAC/B,OAAO;IAAEJ,EAAE,EAAEE,GAAG;IAAE,GAAGI,IAAI,CAACb,IAAI,CAAC;EAAE,CAAC;AACpC;AAEA,OAAO,eAAee,uBAAuBA,CAAA,EAAG;EAC9C,MAAMC,CAAC,GAAGtB,KAAK,CAACJ,UAAU,CAACL,EAAE,EAAE,aAAa,CAAC,EAAEU,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EAC7E,MAAMkB,IAAI,GAAG,MAAMjB,OAAO,CAACoB,CAAC,CAAC;EAC7B,OAAOH,IAAI,CAACI,IAAI,CAACC,GAAG,CAAChC,GAAG,KAAK;IAAEqB,EAAE,EAAErB,GAAG,CAACqB,EAAE;IAAE,GAAGrB,GAAG,CAACc,IAAI,CAAC;EAAE,CAAC,CAAC,CAAC;AAC9D;AAEA,OAAO,eAAemB,iBAAiBA,CAACV,GAAG,EAAE;EAC3C,MAAME,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMlB,SAAS,CAACoB,IAAI,EAAE;IAAEL,QAAQ,EAAE;EAAM,CAAC,CAAC;AAC5C;AAEA,OAAO,eAAec,gBAAgBA,CAACX,GAAG,EAAE;EAC1C,MAAME,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMX,SAAS,CAACa,IAAI,CAAC;AACvB;;AAEA;AACA,OAAO,eAAeU,qBAAqBA,CAACC,OAAO,EAAE;EACnD,MAAMN,CAAC,GAAGtB,KAAK,CAACJ,UAAU,CAACL,EAAE,EAAE,aAAa,CAAC,EAAEU,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE2B,OAAO,CAAC,CAAC;EAC/E,MAAMT,IAAI,GAAG,MAAMjB,OAAO,CAACoB,CAAC,CAAC;EAC7B,OAAOH,IAAI,CAACI,IAAI,CAACC,GAAG,CAAChC,GAAG,KAAK;IAAEqB,EAAE,EAAErB,GAAG,CAACqB,EAAE;IAAE,GAAGrB,GAAG,CAACc,IAAI,CAAC;EAAE,CAAC,CAAC,CAAC;AAC9D;AAEA,OAAO,SAASuB,gBAAgBA,CAACd,GAAG,EAAEe,EAAE,EAAE;EACxC,OAAO/B,UAAU,CAACP,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC,EAAGvB,GAAG,IAAK;IACtDsC,EAAE,CAACtC,GAAG,CAACc,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeyB,UAAUA,CAAChB,GAAG,EAAEiB,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACzE,MAAMlB,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMlB,SAAS,CAACoB,IAAI,EAAE;IACpBN,KAAK,EAAEb,UAAU,CAAC;MAAEkC,MAAM;MAAEC,QAAQ;MAAEC,OAAO;MAAEC;IAAS,CAAC;EAC3D,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeC,aAAaA,CAACrB,GAAG,EAAEsB,OAAO,EAAE;EAChD,MAAMpB,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMlB,SAAS,CAACoB,IAAI,EAAE;IAAEoB;EAAQ,CAAC,CAAC;AACpC;AAEA,OAAO,eAAeC,YAAYA,CAACvB,GAAG,EAAEwB,UAAU,EAAEC,SAAS,EAAE;EAC7D,MAAMvB,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMlB,SAAS,CAACoB,IAAI,EAAE;IACpBoB,OAAO,EAAEE,UAAU;IACnB9B,YAAY,EAAE+B;EAChB,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,eAAeC,aAAaA,CAAC1B,GAAG,EAAE2B,GAAG,EAAE;EAC5C,MAAMzB,IAAI,GAAGzB,GAAG,CAACD,EAAE,EAAE,aAAa,EAAEwB,GAAG,CAAC;EACxC,MAAMI,IAAI,GAAG,MAAMzB,MAAM,CAACuB,IAAI,CAAC;EAC/B,MAAMX,IAAI,GAAGa,IAAI,CAACb,IAAI,CAAC,CAAC;EACxB,OAAO,CAAAA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqC,QAAQ,MAAKD,GAAG;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}